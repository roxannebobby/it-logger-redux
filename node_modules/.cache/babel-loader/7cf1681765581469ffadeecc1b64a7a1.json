{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG } from './types'; // one way to handle getting logs, the next options below is better\n// export const getLogs = () => {\n// \treturn async (dispatch) => {\n// \t\tsetLoading();\n// \t\tconst res = await fetch('/logs');\n// \t\tconst data = await res.json();\n// \t\tdispatch({\n// \t\t\ttype: GET_LOGS,\n// \t\t\tpayload: data,\n// \t\t});\n// \t};\n// };\n// get logs from the server\n\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/logs');\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; // add new log\n\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/logs', {\n      method: 'POST',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; // this will set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:/users/roxan/onedrive/documents/lambdaweb49/unit3/sprint10/it-logger-redux/src/actions/logActions.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","getLogs","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","addLog","log","method","body","JSON","stringify","headers"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA2D,SAA3D,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEX,QADE;AAERY,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GATD,CASE,OAAOI,GAAP,EAAY;AACbR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAET,UADE;AAERU,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaL;AAFd,KAAD,CAAR;AAIA;AACD,CAhBM,C,CAkBP;;AAEA,OAAO,MAAMM,MAAM,GAAIC,GAAD,IAAS,MAAOX,QAAP,IAAoB;AAClD,MAAI;AACHC,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,EAAU;AAChCS,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAF0B;AAGhCK,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AAHuB,KAAV,CAAvB;AAQA,UAAMZ,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAER,OADE;AAERS,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GAhBD,CAgBE,OAAOI,GAAP,EAAY;AACbR,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAET,UADE;AAERU,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaL;AAFd,KAAD,CAAR;AAIA;AACD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMH,UAAU,GAAG,MAAM;AAC/B,SAAO;AACNK,IAAAA,IAAI,EAAEV;AADA,GAAP;AAGA,CAJM","sourcesContent":["import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG } from './types';\r\n\r\n// one way to handle getting logs, the next options below is better\r\n\r\n// export const getLogs = () => {\r\n// \treturn async (dispatch) => {\r\n// \t\tsetLoading();\r\n\r\n// \t\tconst res = await fetch('/logs');\r\n// \t\tconst data = await res.json();\r\n\r\n// \t\tdispatch({\r\n// \t\t\ttype: GET_LOGS,\r\n// \t\t\tpayload: data,\r\n// \t\t});\r\n// \t};\r\n// };\r\n\r\n// get logs from the server\r\nexport const getLogs = () => async (dispatch) => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch('/logs');\r\n\t\tconst data = await res.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: GET_LOGS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: err.response.data,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// add new log\r\n\r\nexport const addLog = (log) => async (dispatch) => {\r\n\ttry {\r\n\t\tsetLoading();\r\n\t\tconst res = await fetch('/logs', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify(log),\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst data = await res.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: ADD_LOG,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGS_ERROR,\r\n\t\t\tpayload: err.response.data,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// this will set loading to true\r\nexport const setLoading = () => {\r\n\treturn {\r\n\t\ttype: SET_LOADING,\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}