{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\roxan\\\\onedrive\\\\documents\\\\lambdaweb49\\\\unit3\\\\sprint10\\\\it-logger-redux\\\\src\\\\components\\\\logs\\\\Logs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Logs = () => {\n  _s();\n\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false); // useEffect is like \"DidMount\" in class components; this is what we want to happen right at app mounting\n\n  useEffect(() => {\n    getLogs(); //eslint-disable-next-line\n  }, []);\n\n  const getLogs = async () => {\n    setLoading(true);\n    const res = await fetch('/logs'); // unlike axios here we need to set data to json type\n\n    const data = await res.json();\n    setLogs(data);\n    setLoading(false);\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }, this);\n  }\n\n  return console.log(logs);\n};\n\n_s(Logs, \"ZGhkABdExOczY9obwOnN8RHRH3E=\");\n\n_c = Logs;\nexport default Logs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Logs\");","map":{"version":3,"sources":["C:/users/roxan/onedrive/documents/lambdaweb49/unit3/sprint10/it-logger-redux/src/components/logs/Logs.js"],"names":["React","useState","useEffect","Logs","logs","setLogs","loading","setLoading","getLogs","res","fetch","data","json","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC,CAFkB,CAIlB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACfM,IAAAA,OAAO,GADQ,CAEf;AACA,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,OAAO,GAAG,YAAY;AAC3BD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,CAAvB,CAF2B,CAG3B;;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAP,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,GARD;;AAUA,MAAID,OAAJ,EAAa;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,SAAOO,OAAO,CAACC,GAAR,CAAYV,IAAZ,CAAP;AACA,CAzBD;;GAAMD,I;;KAAAA,I;AA2BN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Logs = () => {\r\n\tconst [logs, setLogs] = useState([]);\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\t// useEffect is like \"DidMount\" in class components; this is what we want to happen right at app mounting\r\n\tuseEffect(() => {\r\n\t\tgetLogs();\r\n\t\t//eslint-disable-next-line\r\n\t}, []);\r\n\r\n\tconst getLogs = async () => {\r\n\t\tsetLoading(true);\r\n\t\tconst res = await fetch('/logs');\r\n\t\t// unlike axios here we need to set data to json type\r\n\t\tconst data = await res.json();\r\n\r\n\t\tsetLogs(data);\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tif (loading) {\r\n\t\treturn <h4>Loading...</h4>;\r\n\t}\r\n\r\n\treturn console.log(logs);\r\n};\r\n\r\nexport default Logs;\r\n"]},"metadata":{},"sourceType":"module"}