{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\roxan\\\\onedrive\\\\documents\\\\lambdaweb49\\\\unit3\\\\sprint10\\\\it-logger-redux\\\\src\\\\components\\\\logs\\\\Logs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport LogItem from './LogItem';\nimport Preloader from '../layout/Preloader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Logs = () => {\n  _s();\n\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false); // useEffect is like \"DidMount\" in class components; this is what we want to happen right at app mounting\n\n  useEffect(() => {\n    getLogs(); //eslint-disable-next-line\n  }, []);\n\n  const getLogs = async () => {\n    setLoading(true);\n    const res = await fetch('/logs'); // unlike axios here we need to set data to json type\n\n    const data = await res.json();\n    setLogs(data);\n    setLoading(false);\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"collection with-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"collection-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"center\",\n          children: \"System Logs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this), !loading && logs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"center\",\n        children: \"No logs to show ... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 6\n      }, this) : logs.map(log => /*#__PURE__*/_jsxDEV(LogItem, {\n        log: log\n      }, log.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 24\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(Logs, \"ZGhkABdExOczY9obwOnN8RHRH3E=\");\n\n_c = Logs;\n\nconst mapStateToProps = state => ({\n  log: state.log\n});\n\nexport default connect(mapStateToProps)(Logs);\n\nvar _c;\n\n$RefreshReg$(_c, \"Logs\");","map":{"version":3,"sources":["C:/users/roxan/onedrive/documents/lambdaweb49/unit3/sprint10/it-logger-redux/src/components/logs/Logs.js"],"names":["React","useState","useEffect","connect","LogItem","Preloader","Logs","logs","setLogs","loading","setLoading","getLogs","res","fetch","data","json","length","map","log","id","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC,CAFkB,CAIlB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,OAAO,GADQ,CAEf;AACA,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,OAAO,GAAG,YAAY;AAC3BD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,CAAvB,CAF2B,CAG3B;;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAP,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,GARD;;AAUA,MAAID,OAAJ,EAAa;AACZ,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBACC;AAAA,2BACC;AAAI,MAAA,SAAS,EAAC,wBAAd;AAAA,8BACC;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA,+BACC;AAAI,UAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,EAIE,CAACA,OAAD,IAAYF,IAAI,CAACS,MAAL,KAAgB,CAA5B,gBACA;AAAG,QAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,GAGAT,IAAI,CAACU,GAAL,CAAUC,GAAD,iBAAS,QAAC,OAAD;AAAS,QAAA,GAAG,EAAEA;AAAd,SAAwBA,GAAG,CAACC,EAA5B;AAAA;AAAA;AAAA;AAAA,cAAlB,CAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAcA,CAtCD;;GAAMb,I;;KAAAA,I;;AAwCN,MAAMc,eAAe,GAAIC,KAAD,KAAY;AACnCH,EAAAA,GAAG,EAAEG,KAAK,CAACH;AADwB,CAAZ,CAAxB;;AAGA,eAAef,OAAO,CAACiB,eAAD,CAAP,CAAyBd,IAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport LogItem from './LogItem';\r\nimport Preloader from '../layout/Preloader';\r\n\r\nconst Logs = () => {\r\n\tconst [logs, setLogs] = useState([]);\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\t// useEffect is like \"DidMount\" in class components; this is what we want to happen right at app mounting\r\n\tuseEffect(() => {\r\n\t\tgetLogs();\r\n\t\t//eslint-disable-next-line\r\n\t}, []);\r\n\r\n\tconst getLogs = async () => {\r\n\t\tsetLoading(true);\r\n\t\tconst res = await fetch('/logs');\r\n\t\t// unlike axios here we need to set data to json type\r\n\t\tconst data = await res.json();\r\n\r\n\t\tsetLogs(data);\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tif (loading) {\r\n\t\treturn <Preloader />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ul className='collection with-header'>\r\n\t\t\t\t<li className='collection-header'>\r\n\t\t\t\t\t<h4 className='center'>System Logs</h4>\r\n\t\t\t\t</li>\r\n\t\t\t\t{!loading && logs.length === 0 ? (\r\n\t\t\t\t\t<p className='center'>No logs to show ... </p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tlogs.map((log) => <LogItem log={log} key={log.id} />)\r\n\t\t\t\t)}\r\n\t\t\t</ul>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tlog: state.log,\r\n});\r\nexport default connect(mapStateToProps)(Logs);\r\n"]},"metadata":{},"sourceType":"module"}